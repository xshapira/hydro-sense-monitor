name: 🚀 HydroSense Monitor CI/CD
# Only trigger, when the build workflow succeeded
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
permissions:
  contents: read
env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  AWS_LIGHTSAIL_SERVICE_NAME: hydro-sense-monitor
  PROJECT_NAME: "HydroSense Monitor"
  BACKEND_CORS_ORIGINS: "${{ secrets.BACKEND_CORS_ORIGINS }}"
concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true
jobs:
  backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - name: Install backend dependencies
        working-directory: ./backend
        run: uv sync
      - name: Run backend tests
        working-directory: ./backend
        run: PYTHONPATH=.. uv run pytest
      - name: Run backend linting
        working-directory: ./backend
        run: uv run ruff check .
  frontend:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install
      - name: Generate React Router types
        working-directory: ./frontend
        run: pnpm exec react-router typegen
      - name: Run frontend tests
        working-directory: ./frontend
        run: pnpm test
      - name: Run frontend linting and formatting
        working-directory: ./frontend
        run: pnpm run format:lint
      - name: Build frontend
        working-directory: ./frontend
        run: pnpm run build
  build:
    name: 🚧 Build & Deploy
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: 🗂 Getting code from Github
        uses: actions/checkout@v4
      - name: ⚙️ Installing system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip make
      - name: 🏢 Install AWS CLI and Lightsail
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install || true
          aws --version
          curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
          sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
      - name: 🤐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: 📝 Set service configuration
        run: |
          echo "SERVICE_NAME=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-${{ matrix.service }}" >> $GITHUB_ENV
          echo "SERVICE_PORT=${{ matrix.service == 'backend' && '80' || '3000' }}" >> $GITHUB_ENV
          echo "DOCKERFILE_PATH=docker/${{ matrix.service == 'backend' && 'fastapi' || 'node' }}/Dockerfile" >> $GITHUB_ENV
      - name: 📄 Prepare deployment configuration
        run: |
          # Create temp directory for processed configs
          mkdir -p aws/temp

          # Copy service-specific template files
          cp aws/${{ matrix.service }}-deploymentconfig.json aws/temp/deploymentconfig.json
          cp aws/${{ matrix.service }}-publicendpoint.json aws/temp/publicendpoint.json

          # Replace placeholders in deployment config
          sed -i 's/${SERVICE_NAME}/'${{ env.SERVICE_NAME }}'/g' aws/temp/deploymentconfig.json
          sed -i 's/${SERVICE_PORT}/'${{ env.SERVICE_PORT }}'/g' aws/temp/deploymentconfig.json

          # Replace environment-specific placeholders
          if [ "${{ matrix.service }}" = "backend" ]; then
            sed -i 's/${PROJECT_NAME}/${{ env.PROJECT_NAME }}/g' aws/temp/deploymentconfig.json
            sed -i 's/${BACKEND_CORS_ORIGINS}/${{ secrets.BACKEND_CORS_ORIGINS }}/g' aws/temp/deploymentconfig.json
          else
            sed -i 's/${VITE_API_URL}/${{ secrets.VITE_API_URL }}/g' aws/temp/deploymentconfig.json
            sed -i 's/${VITE_SHOW_DEV_TOOLS}/${{ secrets.VITE_SHOW_DEV_TOOLS }}/g' aws/temp/deploymentconfig.json
          fi

          # Replace placeholders in public endpoint config
          sed -i 's/${SERVICE_NAME}/'${{ env.SERVICE_NAME }}'/g' aws/temp/publicendpoint.json
          sed -i 's/${SERVICE_PORT}/'${{ env.SERVICE_PORT }}'/g' aws/temp/publicendpoint.json
      - name: 📄 Verify deployment configs
        run: |
          echo "=== Deployment Config ==="
          cat aws/temp/deploymentconfig.json
          echo "=== Public Endpoint Config ==="
          cat aws/temp/publicendpoint.json
      - name: 🐳 Build Docker container
        run: |
          DOCKER_BUILDKIT=1 docker build \
            -f ${{ env.DOCKERFILE_PATH }} \
            --target ${{ matrix.service == 'backend' && 'production' || 'production' }} \
            -t ${{ env.SERVICE_NAME }}:latest .
      - name: 📬 Push container to AWS Lightsail
        run: |
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${{ env.SERVICE_NAME }} \
            --label ${{ env.SERVICE_NAME }} \
            --image ${{ env.SERVICE_NAME }}:latest
      - name: 🚀 Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --service-name ${{ env.SERVICE_NAME }} \
            --containers file://aws/temp/deploymentconfig.json \
            --public-endpoint file://aws/temp/publicendpoint.json
      - name: 🧹 Clean up old container images
        run: |
          # Get the list of images with creation dates
          aws lightsail get-container-images --service-name ${{ env.SERVICE_NAME }} \
            --query 'containerImages[*].[image,createdAt]' --output json > images.json

          echo "Images for ${{ env.SERVICE_NAME }}:"
          cat images.json

          # Process and keep only the latest 3 images
          jq -r '.[] | .[0] + "," + .[1]' images.json | sort -r -t',' -k2 > sorted_images.txt
          head -n 3 sorted_images.txt | cut -d',' -f1 > images_to_keep.txt
          cut -d',' -f1 sorted_images.txt > all_images.txt

          # Delete older images
          while IFS= read -r image; do
            if ! grep -Fxq "$image" images_to_keep.txt; then
              echo "Deleting old image: $image"
              aws lightsail delete-container-image \
                --service-name ${{ env.SERVICE_NAME }} \
                --image "$image" || echo "Failed to delete $image"
            fi
          done < all_images.txt

          # Cleanup temp files
          rm -f images.json sorted_images.txt images_to_keep.txt all_images.txt
        continue-on-error: true
      - name: ✅ Deployment completed
        run: |-
          echo "🎉 Successfully deployed ${{ matrix.service }} service!"
          echo "Service: ${{ env.SERVICE_NAME }}"
          echo "Region: ${{ env.AWS_REGION }}"

          # Cleanup temp directory
          rm -rf aws/temp
