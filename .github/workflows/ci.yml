name: 🚀 HydroSense Monitor CI/CD
# Only trigger, when the build workflow succeeded
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
permissions:
  contents: read
env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  AWS_LIGHTSAIL_SERVICE_NAME: hydro-sense-monitor
  PROJECT_NAME: "HydroSense Monitor"
  BACKEND_CORS_ORIGINS: "${{ secrets.BACKEND_CORS_ORIGINS }}"
concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true
jobs:
  backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - name: Install backend dependencies
        working-directory: ./backend
        run: uv sync
      - name: Run backend tests
        working-directory: ./backend
        run: PYTHONPATH=.. uv run pytest
      - name: Run backend linting
        working-directory: ./backend
        run: uv run ruff check .
  frontend:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install
      - name: Generate React Router types
        working-directory: ./frontend
        run: bunx react-router typegen
      - name: Run frontend tests
        working-directory: ./frontend
        run: bun test
      - name: Run frontend linting and formatting
        working-directory: ./frontend
        run: bun run format:lint
      - name: Build frontend
        working-directory: ./frontend
        run: bun run build
  build:
    name: 🚧 Build Containers
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [backend, frontend, traefik]
    steps:
      - name: 🗂 Getting code from Github
        uses: actions/checkout@v4
      - name: ⚙️ Installing system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip make gettext-base
      - name: 🏢 Install AWS CLI and Lightsail
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install || true
          aws --version
          curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
          sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
      - name: 🤐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: 📝 Set service configuration
        run: |
          echo "CONTAINER_NAME=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-${{ matrix.service }}" >> $GITHUB_ENV
          if [ "${{ matrix.service }}" = "backend" ]; then
            echo "SERVICE_PORT=8000" >> $GITHUB_ENV
            echo "DOCKERFILE_PATH=docker/fastapi/Dockerfile" >> $GITHUB_ENV
          elif [ "${{ matrix.service }}" = "traefik" ]; then
            echo "SERVICE_PORT=80" >> $GITHUB_ENV
            echo "DOCKERFILE_PATH=docker/traefik/Dockerfile" >> $GITHUB_ENV
          else
            echo "SERVICE_PORT=3000" >> $GITHUB_ENV
            echo "DOCKERFILE_PATH=docker/node/Dockerfile" >> $GITHUB_ENV
          fi
      - name: 📄 Prepare deployment configuration
        run: |
          # Create temp directory for processed configs
          mkdir -p aws/temp

          # Copy service-specific template files
          cp aws/${{ matrix.service }}-deploymentconfig.json aws/temp/deploymentconfig.json
          cp aws/${{ matrix.service }}-publicendpoint.json aws/temp/publicendpoint.json

          # Set up environment variables for envsubst
          export SERVICE_NAME="${{ env.CONTAINER_NAME }}"
          export SERVICE_PORT="${{ env.SERVICE_PORT }}"

          if [ "${{ matrix.service }}" = "backend" ]; then
            export PROJECT_NAME="${{ env.PROJECT_NAME }}"
            export BACKEND_CORS_ORIGINS="${{ secrets.BACKEND_CORS_ORIGINS }}"
            # Replace all placeholders using envsubst
            envsubst '${SERVICE_NAME} ${SERVICE_PORT} ${PROJECT_NAME} ${BACKEND_CORS_ORIGINS}' < aws/temp/deploymentconfig.json > aws/temp/deploymentconfig.tmp
          elif [ "${{ matrix.service }}" = "traefik" ]; then
            # Traefik doesn't need environment variables
            envsubst '${SERVICE_NAME} ${SERVICE_PORT}' < aws/temp/deploymentconfig.json > aws/temp/deploymentconfig.tmp
          else
            export VITE_SHOW_DEV_TOOLS="${{ secrets.VITE_SHOW_DEV_TOOLS || 'false' }}"
            # Replace all placeholders using envsubst
            envsubst '${SERVICE_NAME} ${SERVICE_PORT} ${VITE_SHOW_DEV_TOOLS}' < aws/temp/deploymentconfig.json > aws/temp/deploymentconfig.tmp
          fi

          mv aws/temp/deploymentconfig.tmp aws/temp/deploymentconfig.json

          # Replace placeholders in public endpoint config
          envsubst '${SERVICE_NAME} ${SERVICE_PORT}' < aws/temp/publicendpoint.json > aws/temp/publicendpoint.tmp
          mv aws/temp/publicendpoint.tmp aws/temp/publicendpoint.json
      - name: 📄 Verify deployment configs
        run: |
          echo "=== Deployment Config ==="
          cat aws/temp/deploymentconfig.json
          echo "=== Public Endpoint Config ==="
          cat aws/temp/publicendpoint.json
      - name: 🐳 Build Docker container
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            DOCKER_BUILDKIT=1 docker build \
              -f ${{ env.DOCKERFILE_PATH }} \
              --build-arg VITE_SHOW_DEV_TOOLS="${{ secrets.VITE_SHOW_DEV_TOOLS || 'false' }}" \
              -t ${{ env.CONTAINER_NAME }}:latest .
          else
            DOCKER_BUILDKIT=1 docker build \
              -f ${{ env.DOCKERFILE_PATH }} \
              -t ${{ env.CONTAINER_NAME }}:latest .
          fi
      - name: 📬 Push container to AWS Lightsail
        run: |
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }} \
            --label ${{ env.CONTAINER_NAME }} \
            --image ${{ env.CONTAINER_NAME }}:latest
      - name: 🚀 Push completed
        run: |
          echo "✅ ${{ matrix.service }} container pushed successfully"
      - name: 🧹 Clean up old container images
        run: |
          # Get the list of images with creation dates
          aws lightsail get-container-images --service-name ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }} \
            --query 'containerImages[*].[image,createdAt]' --output json > images.json

          echo "Images for ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}:"
          cat images.json

          # Process and keep only the latest 3 images
          jq -r '.[] | .[0] + "," + .[1]' images.json | sort -r -t',' -k2 > sorted_images.txt
          head -n 3 sorted_images.txt | cut -d',' -f1 > images_to_keep.txt
          cut -d',' -f1 sorted_images.txt > all_images.txt

          # Delete older images
          while IFS= read -r image; do
            if ! grep -Fxq "$image" images_to_keep.txt; then
              echo "Deleting old image: $image"
              aws lightsail delete-container-image \
                --service-name ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }} \
                --image "$image" || echo "Failed to delete $image"
            fi
          done < all_images.txt

          # Cleanup temp files
          rm -f images.json sorted_images.txt images_to_keep.txt all_images.txt
        continue-on-error: true
      - name: ✅ Deployment completed
        run: |-
          echo "🎉 Successfully deployed ${{ matrix.service }} service!"
          echo "Container: ${{ env.CONTAINER_NAME }}"
          echo "Service: ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}"
          echo "Region: ${{ env.AWS_REGION }}"

          # Cleanup temp directory
          rm -rf aws/temp
  deploy:
    name: 🚀 Deploy to Lightsail
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🗂 Getting code from Github
        uses: actions/checkout@v4
      - name: ⚙️ Installing system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip make gettext-base
      - name: 🏢 Install AWS CLI and Lightsail
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install || true
          aws --version
          curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
          sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
      - name: 🤐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: 📄 Create combined deployment configuration
        run: |
          mkdir -p aws/temp

          # Use jq to create proper JSON to avoid escaping issues
          jq -n \
            --arg service_name "${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}" \
            --arg backend_name "${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-backend" \
            --arg frontend_name "${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-frontend" \
            --arg traefik_name "${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-traefik" \
            --arg project_name "${{ env.PROJECT_NAME }}" \
            --arg cors_origins "${{ secrets.BACKEND_CORS_ORIGINS }}" \
            --arg vite_dev_tools "${{ secrets.VITE_SHOW_DEV_TOOLS || 'false' }}" \
            '{
              ($traefik_name): {
                "image": (":" + $service_name + "." + $traefik_name + ".latest"),
                "ports": {
                  "80": "HTTP"
                },
                "environment": {}
              },
              ($backend_name): {
                "image": (":" + $service_name + "." + $backend_name + ".latest"),
                "ports": {
                  "8000": "HTTP"
                },
                "environment": {
                  "PROJECT_NAME": $project_name,
                  "BACKEND_CORS_ORIGINS": $cors_origins
                }
              },
              ($frontend_name): {
                "image": (":" + $service_name + "." + $frontend_name + ".latest"),
                "ports": {
                  "3000": "HTTP"
                },
                "environment": {
                  "VITE_SHOW_DEV_TOOLS": $vite_dev_tools
                }
              }
            }' > aws/temp/deploymentconfig.json

          # Create public endpoint config (traefik will be public)
          jq -n \
            --arg container_name "${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-traefik" \
            '{
              "containerName": $container_name,
              "containerPort": 80,
              "healthCheck": {
                "healthyThreshold": 2,
                "unhealthyThreshold": 3,
                "timeoutSeconds": 10,
                "intervalSeconds": 60,
                "path": "/ping",
                "successCodes": "200-399"
              }
            }' > aws/temp/publicendpoint.json
      - name: 📄 Verify deployment configs
        run: |
          echo "=== Combined Deployment Config ==="
          cat aws/temp/deploymentconfig.json
          echo "=== Public Endpoint Config ==="
          cat aws/temp/publicendpoint.json
      - name: 🚀 Deploy containers to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --service-name ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }} \
            --containers file://aws/temp/deploymentconfig.json \
            --public-endpoint file://aws/temp/publicendpoint.json
      - name: ✅ Deployment completed
        run: |
          echo "🎉 Successfully deployed all containers!"
          echo "Service: ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "Traefik (public): ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-traefik"
          echo "Frontend (internal): ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-frontend"
          echo "Backend (internal): ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}-backend"

          # Cleanup temp directory
          rm -rf aws/temp
